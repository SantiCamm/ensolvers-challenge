{"ast":null,"code":"var _jsxFileName = \"/home/santiago/React/ensolvers-challenge/client/src/components/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect } from 'react';\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { Group, Loader, ScrollArea } from '@mantine/core';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoList = () => {\n  _s();\n\n  const {\n    getTodos,\n    todos,\n    isLoading\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    var _folders;\n\n    getTodos();\n    data = (_folders = folders) === null || _folders === void 0 ? void 0 : _folders.map(folder => folder.name); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Group, {\n    spacing: \"xs\",\n    position: \"center\",\n    styles: theme => ({\n      root: {\n        overflow: \"auto\",\n        height: \"100%\"\n      }\n    }),\n    children: !isLoading ? /*#__PURE__*/_jsxDEV(Group, {\n      spacing: \"xs\",\n      styles: theme => ({\n        root: {\n          width: \"100%\"\n        }\n      }),\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, { ...todo\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {\n      color: \"gray\",\n      variant: \"bars\",\n      size: \"md\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TodoList, \"2xDvlErfpizQR4QrFkA65qaf99I=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/home/santiago/React/ensolvers-challenge/client/src/components/TodoList.jsx"],"names":["useContext","useEffect","GlobalContext","Group","Loader","ScrollArea","TodoItem","TodoList","getTodos","todos","isLoading","data","folders","map","folder","name","theme","root","overflow","height","width","todo","id"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,UAAxB,QAA0C,eAA1C;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAgCV,UAAU,CAACE,aAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACdO,IAAAA,QAAQ;AACRG,IAAAA,IAAI,eAAGC,OAAH,6CAAG,SAASC,GAAT,CAAcC,MAAD,IAAYA,MAAM,CAACC,IAAhC,CAAP,CAFc,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,OAAO,EAAC,IAAf;AAAoB,IAAA,QAAQ,EAAC,QAA7B;AAAsC,IAAA,MAAM,EAAGC,KAAD,KAAY;AACxDC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,MADN;AAEJC,QAAAA,MAAM,EAAE;AAFJ;AADkD,KAAZ,CAA9C;AAAA,cAMG,CAACT,SAAD,gBACG,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,IAAf;AAAoB,MAAA,MAAM,EAAGM,KAAD,KAAY;AACtCC,QAAAA,IAAI,EAAE;AACJG,UAAAA,KAAK,EAAE;AADH;AADgC,OAAZ,CAA5B;AAAA,gBAKGX,KAAK,CAACI,GAAN,CAAWQ,IAAD,iBACT,QAAC,QAAD,OAA4BA;AAA5B,SAAeA,IAAI,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,cADD;AALH;AAAA;AAAA;AAAA;AAAA,YADH,gBAUG,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,OAAO,EAAC,MAA7B;AAAoC,MAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA;AAhBN;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA/BD;;GAAMf,Q;;KAAAA,Q;AAiCN,eAAeA,QAAf","sourcesContent":["import { useContext, useEffect } from 'react';\nimport { GlobalContext } from \"../context/GlobalState\"\nimport { Group, Loader, ScrollArea } from '@mantine/core';\nimport TodoItem from './TodoItem';\n\nconst TodoList = () => {\n  const { getTodos, todos, isLoading} = useContext(GlobalContext);\n\n  useEffect(() => {\n    getTodos();\n    data = folders?.map((folder) => folder.name)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <Group spacing=\"xs\" position=\"center\" styles={(theme) => ({\n      root: {\n        overflow: \"auto\",\n        height: \"100%\"\n      }\n    })}>\n      {!isLoading ?\n          <Group spacing=\"xs\" styles={(theme) => ({\n            root: {\n              width: \"100%\",\n            }\n          })}>\n            {todos.map((todo) => (\n              <TodoItem key={todo.id} {...todo} />\n            ))}\n          </Group>\n        : <Loader color=\"gray\" variant=\"bars\" size=\"md\" />\n      }\n    </Group>\n  );\n\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}