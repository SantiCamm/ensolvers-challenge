{"ast":null,"code":"import axios from 'axios';\nconst todosAPI = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\nconst foldersAPI = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\nconst usersAPI = axios.create({\n  baseURL: \"http://localhost:5000\"\n});\ntodosAPI.interceptors.request.use(req => {\n  const data = JSON.parse(localStorage.getItem(\"profile\"));\n\n  if (!(req !== null && req !== void 0 && req.headers)) {\n    throw new Error(`Expected 'req' and 'req.headers' not to be undefined`);\n  }\n\n  if (data.token) {\n    req.headers.authorization = `Bearer ${data.token}`;\n  }\n\n  return req;\n});\nfoldersAPI.interceptors.request.use(req => {\n  const data = JSON.parse(localStorage.getItem(\"profile\"));\n\n  if (!(req !== null && req !== void 0 && req.headers)) {\n    throw new Error(`Expected 'req' and 'req.headers' not to be undefined`);\n  }\n\n  if (data.token) {\n    req.headers.authorization = `Bearer ${data.token}`;\n  }\n\n  return req;\n}); //todosAPI\n\nexport const fetchTodos = () => todosAPI.get(\"/todos\");\nexport const addTodo = (todo, config) => todosAPI.post(\"/todos\", todo, config);\nexport const deleteTodo = todoId => todosAPI.delete(`/todos/${todoId}`);\nexport const modifyTodo = (todoId, text) => todosAPI.post(`/todos/${todoId}`); //foldersAPI\n\nexport const fetchFolders = () => foldersAPI.get(\"/folders\");\nexport const addFolder = (folder, config) => foldersAPI.post(\"/folders\", folder, config);\nexport const deleteFolder = folderId => foldersAPI.delete(`/folders/${folderId}`); //usersAPI\n\nexport const googleLogin = token => usersAPI.post(\"/users/auth\", token);","map":{"version":3,"sources":["/home/santiago/React/ensolvers-challenge/client/src/api/index.js"],"names":["axios","todosAPI","create","baseURL","foldersAPI","usersAPI","interceptors","request","use","req","data","JSON","parse","localStorage","getItem","headers","Error","token","authorization","fetchTodos","get","addTodo","todo","config","post","deleteTodo","todoId","delete","modifyTodo","text","fetchFolders","addFolder","folder","deleteFolder","folderId","googleLogin"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAACC,EAAAA,OAAO,EAAE;AAAV,CAAb,CAAjB;AACA,MAAMC,UAAU,GAAGJ,KAAK,CAACE,MAAN,CAAa;AAACC,EAAAA,OAAO,EAAE;AAAV,CAAb,CAAnB;AACA,MAAME,QAAQ,GAAGL,KAAK,CAACE,MAAN,CAAa;AAACC,EAAAA,OAAO,EAAE;AAAV,CAAb,CAAjB;AAEAF,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAmCC,GAAD,IAAS;AACvC,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;;AAEA,MAAG,EAACL,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEM,OAAN,CAAH,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACH;;AAEC,MAAIN,IAAI,CAACO,KAAT,EAAgB;AACdR,IAAAA,GAAG,CAACM,OAAJ,CAAYG,aAAZ,GAA6B,UAC3BR,IAAI,CAACO,KACN,EAFD;AAGD;;AACD,SAAOR,GAAP;AACL,CAbD;AAeAL,UAAU,CAACE,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAqCC,GAAD,IAAS;AAC3C,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;;AAEA,MAAG,EAACL,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEM,OAAN,CAAH,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACH;;AAEC,MAAIN,IAAI,CAACO,KAAT,EAAgB;AACdR,IAAAA,GAAG,CAACM,OAAJ,CAAYG,aAAZ,GAA6B,UAC3BR,IAAI,CAACO,KACN,EAFD;AAGD;;AACD,SAAOR,GAAP;AACH,CAbD,E,CAeA;;AACA,OAAO,MAAMU,UAAU,GAAG,MAAMlB,QAAQ,CAACmB,GAAT,CAAa,QAAb,CAAzB;AACP,OAAO,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkBtB,QAAQ,CAACuB,IAAT,CAAc,QAAd,EAAwBF,IAAxB,EAA8BC,MAA9B,CAAlC;AACP,OAAO,MAAME,UAAU,GAAIC,MAAD,IAAYzB,QAAQ,CAAC0B,MAAT,CAAiB,UAASD,MAAO,EAAjC,CAA/B;AACP,OAAO,MAAME,UAAU,GAAG,CAACF,MAAD,EAASG,IAAT,KAAkB5B,QAAQ,CAACuB,IAAT,CAAe,UAASE,MAAO,EAA/B,CAArC,C,CAEP;;AACA,OAAO,MAAMI,YAAY,GAAG,MAAM1B,UAAU,CAACgB,GAAX,CAAe,UAAf,CAA3B;AACP,OAAO,MAAMW,SAAS,GAAG,CAACC,MAAD,EAAST,MAAT,KAAoBnB,UAAU,CAACoB,IAAX,CAAgB,UAAhB,EAA4BQ,MAA5B,EAAoCT,MAApC,CAAtC;AACP,OAAO,MAAMU,YAAY,GAAIC,QAAD,IAAc9B,UAAU,CAACuB,MAAX,CAAmB,YAAWO,QAAS,EAAvC,CAAnC,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAIlB,KAAD,IAAWZ,QAAQ,CAACmB,IAAT,CAAc,aAAd,EAA6BP,KAA7B,CAA/B","sourcesContent":["import axios from 'axios'\n\nconst todosAPI = axios.create({baseURL: \"http://localhost:5000\"})\nconst foldersAPI = axios.create({baseURL: \"http://localhost:5000\"})\nconst usersAPI = axios.create({baseURL: \"http://localhost:5000\"})\n\ntodosAPI.interceptors.request.use((req) => {\n    const data = JSON.parse(localStorage.getItem(\"profile\"));\n\n    if(!req?.headers) {\n        throw new Error(`Expected 'req' and 'req.headers' not to be undefined`);\n    }\n    \n      if (data.token) {\n        req.headers.authorization = `Bearer ${\n          data.token\n        }`;\n      }\n      return req;\n});\n\nfoldersAPI.interceptors.request.use((req) => {\n  const data = JSON.parse(localStorage.getItem(\"profile\"));\n\n  if(!req?.headers) {\n      throw new Error(`Expected 'req' and 'req.headers' not to be undefined`);\n  }\n  \n    if (data.token) {\n      req.headers.authorization = `Bearer ${\n        data.token\n      }`;\n    }\n    return req;\n});\n\n//todosAPI\nexport const fetchTodos = () => todosAPI.get(\"/todos\");\nexport const addTodo = (todo, config) => todosAPI.post(\"/todos\", todo, config);\nexport const deleteTodo = (todoId) => todosAPI.delete(`/todos/${todoId}`);\nexport const modifyTodo = (todoId, text) => todosAPI.post(`/todos/${todoId}`);\n\n//foldersAPI\nexport const fetchFolders = () => foldersAPI.get(\"/folders\")\nexport const addFolder = (folder, config) => foldersAPI.post(\"/folders\", folder, config);\nexport const deleteFolder = (folderId) => foldersAPI.delete(`/folders/${folderId}`);\n\n//usersAPI\nexport const googleLogin = (token) => usersAPI.post(\"/users/auth\", token);"]},"metadata":{},"sourceType":"module"}