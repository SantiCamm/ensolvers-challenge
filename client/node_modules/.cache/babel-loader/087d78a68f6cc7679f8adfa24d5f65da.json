{"ast":null,"code":"var _jsxFileName = \"/home/santiago/React/ensolvers-challenge/client/src/context/GlobalState.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport GlobalReducer from \"./GlobalReducer\";\nimport * as api from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  todos: [],\n  folders: [],\n  isLoading: true,\n  authData: {},\n  foldersSelect: []\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initialState);\nexport const GlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\n\n  async function googleLogin(token, navigate) {\n    try {\n      const googleUserData = await api.googleLogin({\n        token\n      });\n      dispatch({\n        type: \"GOOGLE_LOGIN\",\n        payload: googleUserData.data\n      });\n      navigate(\"/todos\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function logout(navigate) {\n    dispatch({\n      type: \"LOGOUT\"\n    });\n    navigate(\"/login\");\n  }\n\n  async function getFolders() {\n    try {\n      const folders = await api.fetchFolders();\n      dispatch({\n        type: \"GET_FOLDERS\",\n        payload: folders.data.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function addFolder(folder) {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await api.addFolder(folder, config);\n      dispatch({\n        type: \"ADD_FOLDER\",\n        payload: res.data.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function deleteFolder(folder) {\n    try {\n      await api.deleteFolder(folder._id);\n      dispatch({\n        type: \"DELETE_FOLDER\",\n        payload: folder\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getTodos() {\n    try {\n      const todos = await api.fetchTodos();\n      dispatch({\n        type: \"GET_TODOS\",\n        payload: todos.data.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function addTodo(todo) {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await api.addTodo(todo, config);\n      dispatch({\n        type: \"ADD_TODO\",\n        payload: res.data.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function modifyTodo(todoId, todoText) {\n    try {\n      console.log(todoText);\n      await api.modifyTodo(todoId, todoText);\n      dispatch({\n        type: \"MODIFY_TODO\",\n        payload: todoId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function deleteTodo(todoId) {\n    try {\n      await api.deleteTodo(todoId);\n      dispatch({\n        type: \"DELETE_TODO\",\n        payload: todoId\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      todos: state.todos,\n      folders: state.folders,\n      isLoading: state.isLoading,\n      authData: state.authData,\n      foldersSelect: state.foldersSelect,\n      googleLogin,\n      logout,\n      getFolders,\n      addFolder,\n      deleteFolder,\n      getTodos,\n      addTodo,\n      modifyTodo,\n      deleteTodo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/santiago/React/ensolvers-challenge/client/src/context/GlobalState.jsx"],"names":["React","createContext","useReducer","GlobalReducer","api","initialState","todos","folders","isLoading","authData","foldersSelect","GlobalContext","GlobalProvider","children","state","dispatch","googleLogin","token","navigate","googleUserData","type","payload","data","error","console","log","logout","getFolders","fetchFolders","addFolder","folder","config","headers","res","deleteFolder","_id","getTodos","fetchTodos","addTodo","todo","modifyTodo","todoId","todoText","deleteTodo"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport GlobalReducer from \"./GlobalReducer\";\nimport * as api from \"../api\";\n\nconst initialState = {\n  todos: [],\n  folders: [],\n  isLoading: true,\n  authData: {},\n  foldersSelect: [],\n};\n\nexport const GlobalContext = createContext(initialState);\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\n\n  async function googleLogin(token, navigate) {\n    try {\n      const googleUserData = await api.googleLogin({ token });\n      dispatch({\n        type: \"GOOGLE_LOGIN\",\n        payload: googleUserData.data,\n      });\n      navigate(\"/todos\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function logout(navigate) {\n    dispatch({\n      type: \"LOGOUT\",\n    });\n    navigate(\"/login\");\n  }\n\n  async function getFolders() {\n    try {\n      const folders = await api.fetchFolders();\n      dispatch({\n        type: \"GET_FOLDERS\",\n        payload: folders.data.data,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function addFolder(folder) {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const res = await api.addFolder(folder, config);\n      dispatch({\n        type: \"ADD_FOLDER\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function deleteFolder(folder) {\n    try {\n      await api.deleteFolder(folder._id);\n      dispatch({ type: \"DELETE_FOLDER\", payload: folder });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getTodos() {\n    try {\n      const todos = await api.fetchTodos();\n      dispatch({\n        type: \"GET_TODOS\",\n        payload: todos.data.data,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function addTodo(todo) {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const res = await api.addTodo(todo, config);\n      dispatch({\n        type: \"ADD_TODO\",\n        payload: res.data.data,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function modifyTodo(todoId, todoText) {\n    try {\n      console.log(todoText)\n      await api.modifyTodo(todoId, todoText);\n      dispatch({ type: \"MODIFY_TODO\", payload: todoId });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function deleteTodo(todoId) {\n    try {\n      await api.deleteTodo(todoId);\n      dispatch({ type: \"DELETE_TODO\", payload: todoId });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        todos: state.todos,\n        folders: state.folders,\n        isLoading: state.isLoading,\n        authData: state.authData,\n        foldersSelect: state.foldersSelect,\n        googleLogin,\n        logout,\n        getFolders,\n        addFolder,\n        deleteFolder,\n        getTodos,\n        addTodo,\n        modifyTodo,\n        deleteTodo,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n  \n};\n\n"]},"metadata":{},"sourceType":"module"}